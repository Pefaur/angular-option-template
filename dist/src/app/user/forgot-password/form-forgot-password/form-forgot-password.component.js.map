{"version":3,"sources":["../../../../../../src/app/user/forgot-password/form-forgot-password/form-forgot-password.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAa,YAAA,EAAiC,MAAA,EAAO,MAAO,eAAA,CAAgB;AACnF,OAAO,EAAe,UAAA,EAAW,MAAO,gBAAA,CAAiB;AACzD,OAAO,EAAE,gBAAA,EAA8C,MAAO,cAAA,CAAe;AAG7E,eAAe;AACf,0CAA0C;AAC1C,0DAA0D;AAC1D,yDAAyD;AACzD,KAAK;AACL;IAAoD,kDAAgB;IA6BlE,wCAAsB,WAAwB,EAAY,WAA2B;QAArF,YACE,kBAAM,WAAW,CAAC,SAMnB;QAPqB,iBAAW,GAAX,WAAW,CAAa;QAAY,iBAAW,GAAX,WAAW,CAAgB;QA5BpF,iBAAW,GAAG,IAAI,YAAY,EAAE,CAAC;QACjC,mBAAa,GAAG,IAAI,YAAY,EAAE,CAAC;QAIpC,gBAAU,GAAG;YACX,OAAO,EAAE,EAAE;SACZ,CAAC;QAEF,yBAAmB,GAAG;YACpB,OAAO,EAAE;gBACP,UAAU,EAAE,mBAAmB;gBAC/B,OAAO,EAAE,eAAe;aACzB;SACF,CAAC;QAEF,qBAAe,GAAG;YAChB,GAAG,EAAE,yEAAyE;YAC9E,GAAG,EAAE,qCAAqC;YAC1C,GAAG,EAAE,iBAAiB;SACvB,CAAC;QAEF,kBAAY,GAAG;YACb,OAAO,EAAE,OAAO;SACjB,CAAC;QAEF,kBAAY,GAAG,kBAAkB,CAAC;QAIhC,KAAI,CAAC,8BAA8B,GAAG;YACpC,OAAO,EAAE;gBACP,IAAI,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC;aAC9C;SACF,CAAC;;IACJ,CAAC;IAED,iDAAQ,GAAR;QACE,iBAAM,QAAQ,WAAE,CAAC;QACjB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC9B,CAAC;IAED,oDAAW,GAAX;QACE,uBAAuB;QACvB,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAA,gBAAgB;YACzC,gBAAgB,CAAC,WAAW,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,+CAAM,GAAN;QAAA,iBAaC;QAZC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;aAChF,SAAS,CACR,UAAC,QAAqB;YACpB,KAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACxB,KAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC,EACD,UAAC,QAAqB;YACpB,KAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;YAC1B,KAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC7C,CAAC,CACF,CACF,CAAC;IACJ,CAAC;IACI,6CAAc,GAA2C;QAChE,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QAClC,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KACnC,CAAC;IACF,qCAAC;CApED,AAoEC,CApEmD,gBAAgB,GAoEnE;SApEY,8BAA8B","file":"form-forgot-password.component.js","sourceRoot":"","sourcesContent":["import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { OptFormComponent, OptAuthService, OptResponse } from '@option/core';\nimport { ISubscription } from 'rxjs/Subscription';\n\n// @Component({\n//   selector: 'opt-form-forgot-password',\n//   templateUrl: './form-forgot-password.component.html',\n//   styleUrls: ['./form-forgot-password.component.scss']\n// })\nexport class OptFormForgotPasswordComponent extends OptFormComponent implements OnInit, OnDestroy {\n   onSubmitted = new EventEmitter();\n   onSubmitError = new EventEmitter();\n\n  requestSubscribes: ISubscription[];\n\n  formErrors = {\n    'email': ''\n  };\n\n  VALIDATION_MESSAGES = {\n    'email': {\n      'required': 'Email is required',\n      'email': 'Invalid email'\n    }\n  };\n\n  SERVER_MESSAGES = {\n    204: 'The instructions to recover your password were delivered to your email.',\n    400: 'Recovery email already sent before.',\n    404: 'User not found.'\n  };\n\n  PLACEHOLDERS = {\n    'email': 'Email'\n  };\n\n  SUMBIT_LABEL = 'Recover password';\n\n  constructor(protected formBuilder: FormBuilder, protected authService: OptAuthService) {\n    super(formBuilder);\n    this.formBuilderGroupControlsConfig = {\n      'email': [\n        null, [Validators.required, Validators.email]\n      ]\n    };\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.requestSubscribes = [];\n  }\n\n  ngOnDestroy(): void {\n    // unsubscribe requests\n    this.requestSubscribes.map(requestSubscribe => {\n      requestSubscribe.unsubscribe();\n    });\n  }\n\n  submit() {\n    this.requestSubscribes.push(this.authService.recoverPassword(this.form.value.email)\n      .subscribe(\n        (response: OptResponse) => {\n          this.onSubmitted.emit();\n          this.setServerMessage(response.statusCode, true);\n        },\n        (response: OptResponse) => {\n          this.onSubmitError.emit();\n          this.setServerMessage(response.statusCode);\n        }\n      )\n    );\n  }\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onSubmitted': [{ type: Output },],\n'onSubmitError': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}