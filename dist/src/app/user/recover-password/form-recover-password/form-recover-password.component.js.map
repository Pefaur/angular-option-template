{"version":3,"sources":["../../../../../../src/app/user/recover-password/form-recover-password/form-recover-password.component.ts"],"names":[],"mappings":"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","file":"form-recover-password.component.js","sourceRoot":"","sourcesContent":["import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { OptFormComponent, OptAuthService, OptResponse, OptPasswordValidation } from '@option/core';\nimport { ISubscription } from 'rxjs/Subscription';\n\n// @Component({\n//   selector: 'opt-form-recover-password',\n//   templateUrl: './form-recover-password.component.html',\n//   styleUrls: ['./form-recover-password.component.scss']\n// })\nexport class OptFormRecoverPasswordComponent extends OptFormComponent implements OnInit, OnDestroy {\n\n   onSubmitted = new EventEmitter();\n   onSubmitError = new EventEmitter();\n\n  requestSubscribes: ISubscription[];\n\n  token: string;\n\n  formErrors = {\n    'password': '',\n    'repeatPassword': ''\n  };\n\n  VALIDATION_MESSAGES = {\n    'password': {\n      'required': 'Password is required',\n      'minlength': 'Password must be at least 8 characters long'\n    },\n    'repeatPassword': {\n      'required': 'Repeat password is required',\n      'MatchPassword': 'Passwords must be equal'\n    }\n  };\n\n  SERVER_MESSAGES = {\n    204: 'The password successfully changed.',\n    404: 'The password change request is invalid.',\n    401: 'The password change request was previously used.' // the token is used before\n  };\n\n  PLACEHOLDERS = {\n    'password': 'Nueva contraseña',\n    'repeatPassword': 'Repetir contraseña'\n  };\n\n  SUMBIT_LABEL = 'Update password';\n\n  constructor(protected formBuilder: FormBuilder,\n              protected authService: OptAuthService,\n              protected router: Router,\n              protected activatedRoute: ActivatedRoute) {\n    super(formBuilder);\n    this.formBuilderGroupControlsConfig = {\n      'password': [\n        null, [Validators.required, Validators.minLength(8)]\n      ],\n      'repeatPassword': [\n        null, [Validators.required]\n      ]\n    };\n    this.formBuilderGroupExtra = {\n      validator: OptPasswordValidation.MatchPassword\n    };\n  }\n\n  ngOnInit(): void {\n    // subscribe to router event\n    this.activatedRoute.params.subscribe((params: Params) => {\n      this.token = params['token'];\n    });\n\n    super.buildForm();\n\n    this.requestSubscribes = [];\n  }\n\n  ngOnDestroy(): void {\n    // unsubscribe requests\n    this.requestSubscribes.map(requestSubscribe => {\n      requestSubscribe.unsubscribe();\n    });\n  }\n\n  goToLogin() {\n    this.router.navigate(['/login']);\n  }\n\n  submit() {\n    const password = this.form.value.password;\n    const passwordConfirmation = this.form.value.password;\n    this.requestSubscribes.push(this.authService.resetPassword(this.token, password, passwordConfirmation)\n      .subscribe(\n        (response: OptResponse) => {\n          this.onSubmitted.emit();\n          this.setServerMessage(response.statusCode, true);\n        },\n        (response: OptResponse) => {\n          this.onSubmitError.emit();\n          this.setServerMessage(response.statusCode);\n        }\n      )\n    );\n  }\n  \nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onSubmitted': [{ type: Output },],\n'onSubmitError': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}