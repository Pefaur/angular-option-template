{"version":3,"sources":["../../../../src/app/directives/select2.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAiB,SAAA,EAAW,UAAA,EAAY,YAAA,EAAc,KAAA,EAAO,MAAA,EAAO,MAAO,eAAA,CAAgB;AAClG,OAAO,EAAE,oBAAA,EAAqB,MAAO,cAAA,CAAe;AAMpD;IAME,0BAAoB,iBAAuC,EAAU,EAAc;QAA/D,sBAAiB,GAAjB,iBAAiB,CAAsB;QAAU,OAAE,GAAF,EAAE,CAAY;QAHlF,aAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QAC9B,eAAU,GAAG,IAAI,YAAY,EAAE,CAAC;IAGjC,CAAC;IAED,0CAAe,GAAf;QACE,IAAM,IAAI,GAAG,IAAI,CAAC;QAElB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAExD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC;aACnC,IAAI,CAAC,UAAA,IAAI;YACR,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,YAAY,CAAC;iBAC5C,IAAI,CAAC;gBACJ,IAAM,eAAe,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvE,eAAe,CAAC,EAAE,CAAC,gBAAgB,EAAE,UAAU,CAAM;oBACnD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;gBACH,eAAe,CAAC,EAAE,CAAC,kBAAkB,EAAE;oBACrC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACvB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,KAAU;gBAChB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;YACpB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,KAAK;YACV,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;IACI,2BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,cAAc;iBACzB,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,+BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,oBAAoB,GAAG;QAC9B,EAAC,IAAI,EAAE,UAAU,GAAG;KACnB,EAH6F,CAG7F,CAAC;IACK,+BAAc,GAA2C;QAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,YAAY,EAAG,EAAE,EAAE;QACrD,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QAC/B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KAChC,CAAC;IACF,uBAAC;CAjDD,AAiDC,IAAA;SAjDY,gBAAgB","file":"select2.directive.js","sourceRoot":"","sourcesContent":["import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';\nimport { OptLazyScriptService } from '@option/core';\n\ndeclare let $: any;\ndeclare let jQuery: any;\n\n\nexport class Select2Directive implements AfterViewInit {\n\n   options: any;\n   onSelect = new EventEmitter();\n   onUnselect = new EventEmitter();\n\n  constructor(private lazyScriptService: OptLazyScriptService, private el: ElementRef) {\n  }\n\n  ngAfterViewInit() {\n    const self = this;\n\n    self.options = $.extend({language: 'es'}, self.options);\n\n    self.lazyScriptService.load('select2')\n      .then(data => {\n        self.lazyScriptService.loadScript('select2-es')\n          .then(() => {\n            const $select2Element = $(self.el.nativeElement).select2(self.options);\n            $select2Element.on('select2:select', function (e: any) {\n              self.onSelect.emit($select2Element.val());\n            });\n            $select2Element.on('select2:unselect', function () {\n              self.onSelect.emit();\n            });\n          })\n          .catch((error: any) => {\n            console.log(error)\n          });\n      })\n      .catch(error => {\n        console.log(error)\n      });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[optSelect2]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OptLazyScriptService, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input, args: ['optSelect2', ] },],\n'onSelect': [{ type: Output },],\n'onUnselect': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}