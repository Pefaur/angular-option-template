{"version":3,"sources":["../../../../src/app/directives/color-picker.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAO,MAAA,EAAQ,YAAA,EAA4B,MAAO,eAAA,CAAgB;AACtF,OAAO,EAAE,oBAAA,EAAqB,MAAO,cAAA,CAAe;AAKpD;IAIE,8BAAoB,iBAAuC;QAAvC,sBAAiB,GAAjB,iBAAiB,CAAsB;QAF1D,kBAAa,GAAsB,IAAI,YAAY,EAAE,CAAC;IAGvD,CAAC;IAED,8CAAe,GAAf;QACE,IAAM,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC;aACvC,IAAI,CAAC,UAAC,IAAS;YACd,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,EAAC,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,UAAU,CAAM;gBACjG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACrC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;aACD,KAAK,CAAC,UAAC,KAAU;YAChB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;IACI,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,kBAAkB;iBAC7B,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,mCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,oBAAoB,GAAG;KAC7B,EAF6F,CAE7F,CAAC;IACK,mCAAc,GAA2C;QAChE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACxB,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KACnC,CAAC;IACF,2BAAC;CAjCD,AAiCC,IAAA;SAjCY,oBAAoB","file":"color-picker.directive.js","sourceRoot":"","sourcesContent":["import { Directive, Input, Output, EventEmitter, AfterViewInit } from '@angular/core';\nimport { OptLazyScriptService } from '@option/core';\n\ndeclare let $: any;\n\n\nexport class ColorPickerDirective implements AfterViewInit {\n   id: string;\n   onChangeColor: EventEmitter<any> = new EventEmitter();\n\n  constructor(private lazyScriptService: OptLazyScriptService) {\n  }\n\n  ngAfterViewInit() {\n    const self = this;\n    self.lazyScriptService.load('colorpicker')\n      .then((data: any) => {\n        console.log('script loaded ', data);\n        $(document.getElementById(self.id)).colorpicker({format: 'hex'}).on('changeColor', function (e: any) {\n          self.onChangeColor.emit(this.value)\n        });\n      })\n      .catch((error: any) => {\n        console.log(error)\n      });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[optColorPicker]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OptLazyScriptService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'onChangeColor': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}